from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import datetime


def admMenuKb():

	button1 = KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
	button2 = KeyboardButton(text="üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
	button3 = KeyboardButton(text="üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
	button4 = KeyboardButton(text="üîí –ê–¥–º–∏–Ω–∫–∞")

	kb = ReplyKeyboardMarkup(keyboard = [[button1],
						 [button2],
						 [button3],
						 [button4]],
				 resize_keyboard = True)

	return kb

def admAdmKb():

	button1 = KeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
	button2 = KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –î/–ó")
	button3 = KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
	button4 = KeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
	back = KeyboardButton(text="üîô –ù–∞–∑–∞–¥")

	kb = ReplyKeyboardMarkup(keyboard = [[button1],
						 [button2],
						 [button3],
						 [button4],
						 [back]],
				 resize_keyboard = True)

	return kb

def backKb():

	button1 = KeyboardButton(text="üîô –ù–∞–∑–∞–¥")

	kb = ReplyKeyboardMarkup(keyboard = [[button1]],
				 resize_keyboard = True)

	return kb

def backIKb():

    back = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    ikb = InlineKeyboardMarkup(inline_keyboard=[[back]]) 

    return ikb

def chooseRoleKb():

	button1 = KeyboardButton(text="–£—á–µ–Ω–∏–∫")
	button2 = KeyboardButton(text="–ê–¥–º–∏–Ω")
	button3 = KeyboardButton(text="üîô –ù–∞–∑–∞–¥")

	kb = ReplyKeyboardMarkup(keyboard = [[button1],
						 [button2],
						 [button3]],
				 resize_keyboard = True)

	return kb

def deletePersonKb():

	button1 = KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å")
	button2 = KeyboardButton(text="üîô –ù–∞–∑–∞–¥")

	kb = ReplyKeyboardMarkup(keyboard = [[button1],
						 [button2]],
				 resize_keyboard = True)

	return kb

def deleteButtonIKb(ID: int):

	button = InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_message_{ID}")
	ikb = InlineKeyboardMarkup(inline_keyboard = [[button]])

	return ikb

def addUserButtonIKb(ID: int):

	button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_user_{ID}")
	ikb = InlineKeyboardMarkup(inline_keyboard = [[button]])

	return ikb

def deleteUserButtonIKb(ID: int):

	button = InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{ID}")
	ikb = InlineKeyboardMarkup(inline_keyboard = [[button]])

	return ikb

def mailingIKb():

	button1 = InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing")
	button2 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_message")

	kb = InlineKeyboardMarkup(inline_keyboard = [[button1],
						                         [button2]])

	return kb

def homeworkKb():

	button1 = KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å')
	back = KeyboardButton(text='üîô –ù–∞–∑–∞–¥')

	kb = ReplyKeyboardMarkup(keyboard = [[button1],
										 [back]],
							 resize_keyboard=True)

	return kb

def admWeekCalendarIkb(selected_date: datetime.date = None):

	if isinstance(selected_date, str):
		selected_date = datetime.date.fromisoformat(selected_date)

	if selected_date is None:
		selected_date = datetime.date.today()

	start_week = selected_date - datetime.timedelta(days=selected_date.weekday())

	days_map = {0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±"}

	MONTHS_NOMINATIVE = [
			"—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
			"–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
	]

	builder = InlineKeyboardBuilder()

	day_buttons = []
	for i in range(6):
		day = start_week + datetime.timedelta(days=i)
		button_text = f"{days_map.get(i, '')} {day.day:02d}"

		day_buttons.append(InlineKeyboardButton(text=button_text, callback_data=f"select_date:{day.isoformat()}"))

	builder.row(*day_buttons[0:3])
	builder.row(*day_buttons[3:6])

	prev_week = start_week - datetime.timedelta(days=7)
	next_week = start_week + datetime.timedelta(days=7)

	month_year_text = selected_date.strftime(f"{MONTHS_NOMINATIVE[start_week.month - 1]}")

	builder.row(
			InlineKeyboardButton(text="<<", callback_data=f"change_week:{prev_week.isoformat()}"),
			InlineKeyboardButton(text=month_year_text, callback_data="ignore"),
			InlineKeyboardButton(text=">>", callback_data=f"change_week:{next_week.isoformat()}")
	)

	builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_homework"))

	return builder.as_markup()

